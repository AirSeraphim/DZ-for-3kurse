using System;
using System.Runtime.Serialization; // Подключаем для поддержки сериализации исключений (например, при передаче по сети или сохранении)

namespace  lab1
{
     
    /// Исключение, которое выбрасывается, когда не удаётся найти подходящий конструктор 
    /// при попытке десериализации объекта.
    /// Например, если нет конструктора с нужными параметрами или отсутствует конструктор по умолчанию.
     
    public class ConstructorNotFoundException : Exception
    {
        // Стандартное сообщение об ошибке по умолчанию
        const string kMessage = "Constructor has not found.";

         
        /// Создаёт новое исключение с сообщением по умолчанию: "Constructor has not found."
        /// Используется, когда не нужно указывать дополнительную информацию.
         
        public ConstructorNotFoundException() : base(kMessage)
        {
            // Вызывает базовый класс Exception, передавая стандартное сообщение об ошибке
        }

         
        /// Создаёт новое исключение с пользовательским сообщением.
        /// Позволяет уточнить, какой именно конструктор не был найден или в каком классе произошла ошибка.

        public ConstructorNotFoundException(string? message) : base(message)
        {
            // Передаёт указанное сообщение в базовый класс Exception
            // ? означает, что аргумент может быть null — это допустимо для исключений
        }

         
        /// Создаёт новое исключение с описанием и внутренним (вложенным) исключением.
        /// Полезно, когда эта ошибка является следствием другой — например, ошибка вызвана падением при анализе конструкторов.
        /// Позволяет сохранить полную цепочку ошибок для отладки.
         
        public ConstructorNotFoundException(string? message, Exception? innerException) : base(message, innerException)
        {
            // Конструктор с возможностью вложить предыдущее исключение
            // Это помогает понять первопричину проблемы при анализе стека вызовов
        }

         
        /// Конструктор, используемый при десериализации исключения.
        /// Вызывается автоматически средой .NET, когда исключение восстанавливается из сериализованного состояния
        /// (например, при передаче между доменами, через WCF, или при логировании с последующим восстановлением).
        /// Обеспечивает полную поддержку сериализации пользовательского исключения.
         
        protected ConstructorNotFoundException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
            // Этот конструктор обязателен, если класс помечен как [Serializable]
            // Он позволяет корректно восстанавливать исключение после его сериализации
            // Без него возможны ошибки при использовании в распределённых приложениях
        }
    }
}