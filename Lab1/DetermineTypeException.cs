using System;
using System.Runtime.Serialization; // Для поддержки сериализации исключений (используется в конструкторе с info/context)

namespace  lab1
{
    /// Исключение, которое выбрасывается, когда не удаётся определить тип значения 
    /// при попытке десериализации или анализа данных.
    /// Например, если строка не может быть преобразована ни в число, ни в символ, ни в другой ожидаемый тип.
    public class DetermineTypeException : Exception
    {
        // Стандартное сообщение по умолчанию для этого исключения
        const string message = "TypeError";

        /// Создаёт новый экземпляр исключения с сообщением по умолчанию: "TypeError".
        public DetermineTypeException() : base(message: message)
        {
            // Вызывает базовый конструктор класса Exception, передавая стандартное сообщение об ошибке
        }

        /// Создаёт новый экземпляр исключения с пользовательским сообщением.
        /// Позволяет указать конкретную причину ошибки.
        public DetermineTypeException(string? message) : base(message)
        {
            // Передаёт пользовательское сообщение базовому классу Exception
            // ? означает, что значение может быть null
        }

        /// Создаёт новый экземпляр исключения с сообщением и внутренним исключением.
        /// Используется для оборачивания другой ошибки, ставшей причиной текущей.
        /// Позволяет сохранить полный стек вызовов и цепочку исключений.
        public DetermineTypeException(string? message, Exception? innerException) : base(message, innerException)
        {
            // Позволяет указать не только своё сообщение, но и вложить предыдущее исключение
            // Это помогает при отладке: можно проследить всю цепочку ошибок
        }

        /// Конструктор, используемый при десериализации исключения.
        /// Вызывается средой .NET при восстановлении объекта исключения из потока (например, при передаче по сети).
        /// Обеспечивает поддержку сериализации пользовательского исключения.
        protected DetermineTypeException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
            // Этот конструктор необходим, чтобы исключение могло корректно восстанавливаться
            // после сериализации (например, при использовании BinaryFormatter или других механизмов)
            // Без него возможны ошибки при удалённых вызовах или межпроцессном взаимодействии
        }
    }
}